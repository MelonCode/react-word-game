{"version":3,"sources":["components/WordList.tsx","components/GameComponent.tsx","components/utils.tsx","components/views/StartScreenView.tsx","components/views/CongratulationsView.tsx","components/views/LandscapeUnsupportedView.tsx","components/views/ErrorView.tsx","components/views/LoadingView.tsx","App.tsx","index.tsx"],"names":["WordList","words","remainingWords","className","map","word","style","textDecoration","includes","GameComponent","level","data","onLevelComplete","useState","mouseOver","setMouseOver","dragStart","setDragStart","isMouseDown","setMouseDown","lineLength","character_grid","length","characters","flat","indexes","_","index","matchedCells","setMatchedCells","Object","values","word_locations","setRemainingWords","useEffect","highlight","startIndex","currentIndex","x1","y1","Math","trunc","x2","y2","getDragMode","minX","min","maxX","max","slice","result","minY","maxY","i","push","sort","a","b","maxDiff","vD","hD","nextX","nextValue","getHighlightArray","onMouseUp","key","flatMap","value","join","targetWord","currentMatched","wordsLeft","filter","console","log","checkMatch","handleTouchMove","e","touch","touches","document","elementFromPoint","clientX","clientY","dataset","Number","getCellClass","onPointerUp","onTouchEnd","textTransform","onContextMenu","event","preventDefault","char","onPointerDown","onMouseDown","onTouchStart","onMouseOver","onTouchMove","data-index","StartScreenView","onClick","CongratulationsView","width","height","src","alt","LandscapeUnsupportedView","ErrorView","LoadingView","fetchData","axios","get","then","res","split","lines","line","JSON","parse","App","isLoading","setLoading","showLoader","setShowLoader","isError","setError","isStarted","setStarted","isFinished","setFinished","undefined","setData","setLevel","orientation","getOrientation","window","innerWidth","innerHeight","setOrientation","updateOrientation","useCallback","addEventListener","removeEventListener","useScreenOrientation","isMobile","React","setMobile","userAgent","navigator","mobile","Boolean","match","useDeviceDetect","setTimeout","loadData","passive","currentLevel","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fb668ffe.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface WordListProps {\r\n  words: string[];\r\n  remainingWords: string[];\r\n}\r\n\r\nexport const WordList: React.FC<WordListProps> = ({\r\n  words,\r\n  remainingWords\r\n}) => (\r\n  <div className=\"list-wrapper\">\r\n    <h2>Find Words</h2>\r\n    <ol className=\"list\">\r\n      {words.map(word => (\r\n        <li\r\n          style={{\r\n            textDecoration: remainingWords.includes(word)\r\n              ? 'none'\r\n              : 'line-through'\r\n          }}\r\n          key={word}\r\n        >\r\n          {word}\r\n        </li>\r\n      ))}\r\n    </ol>\r\n  </div>\r\n);\r\n","import React, { FC, TouchEventHandler, useEffect, useState } from 'react';\r\nimport { WordList } from './WordList';\r\nimport { DataStructure, WordLocationType } from './types';\r\nimport { getHighlightArray } from './utils';\r\n\r\ninterface GameComponentProps {\r\n  level: number;\r\n  onLevelComplete?: () => void;\r\n  data: DataStructure;\r\n}\r\n\r\nexport const GameComponent: FC<GameComponentProps> = ({\r\n  level,\r\n  data,\r\n  onLevelComplete\r\n}) => {\r\n  const [mouseOver, setMouseOver] = useState(-1);\r\n  const [dragStart, setDragStart] = useState(-1);\r\n  const [isMouseDown, setMouseDown] = useState(false);\r\n\r\n  const lineLength = data.character_grid[0].length;\r\n  const characters = data.character_grid.flat();\r\n  const indexes = characters.map((_, index) => index);\r\n\r\n  const [matchedCells, setMatchedCells] = useState<number[]>([]);\r\n  const [remainingWords, setRemainingWords] = useState<string[]>(\r\n    Object.values(data.word_locations)\r\n  );\r\n\r\n  useEffect(() => {\r\n    setMatchedCells([]);\r\n    setRemainingWords(Object.values(data.word_locations));\r\n  }, [data]);\r\n\r\n  const highlight = isMouseDown\r\n    ? getHighlightArray(dragStart, mouseOver, lineLength, indexes)\r\n    : [];\r\n\r\n  const checkMatch = () => {\r\n    const coords = highlight.flatMap(value => [\r\n      value % lineLength, // Get X value\r\n      Math.trunc(value / lineLength) // Get Y Value\r\n    ]);\r\n\r\n    const key = coords.join(',') as WordLocationType;\r\n\r\n    if (key in data.word_locations) {\r\n      const targetWord = data.word_locations[key];\r\n\r\n      setMatchedCells(currentMatched => [...currentMatched, ...highlight]);\r\n      const wordsLeft = remainingWords.filter(word => word !== targetWord);\r\n      setRemainingWords(wordsLeft);\r\n\r\n      if (wordsLeft.length === 0) {\r\n        onLevelComplete?.();\r\n        console.log('match!', data.word_locations[key]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onMouseDown = (index: number) => {\r\n    setMouseDown(true);\r\n    setDragStart(index);\r\n    setMouseOver(index);\r\n  };\r\n\r\n  const onMouseUp = () => {\r\n    setMouseDown(false);\r\n    setDragStart(-1);\r\n    checkMatch();\r\n  };\r\n\r\n  const handleTouchMove: TouchEventHandler<HTMLDivElement> = e => {\r\n    // get the touch element\r\n    const touch = e.touches[0];\r\n\r\n    // get the DOM element under current finger position\r\n    const box = document.elementFromPoint(\r\n      touch.clientX,\r\n      touch.clientY\r\n    ) as HTMLElement;\r\n\r\n    // Get cell index from data attribute\r\n    const value = box!.dataset.index;\r\n    if (value != null) {\r\n      const index = Number(value);\r\n      setMouseOver(index);\r\n    }\r\n  };\r\n\r\n  const getCellClass = (index: number) => {\r\n    if (matchedCells.includes(index)) return 'match';\r\n    if (highlight.includes(index)) return 'selected';\r\n    return undefined;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      onPointerUp={onMouseUp}\r\n      onTouchEnd={onMouseUp}\r\n      className=\"game-wrapper\"\r\n    >\r\n      <div>\r\n        <h2>\r\n          Level {level + 1}. Source Word:{' '}\r\n          <span style={{ textTransform: 'capitalize' }}>{data.word}</span>\r\n        </h2>\r\n        <div\r\n          key={data.word}\r\n          className=\"game\"\r\n          style={{ '--length': lineLength } as React.CSSProperties}\r\n          onContextMenu={event => event.preventDefault()}\r\n        >\r\n          {characters.map((char, index) => {\r\n            return (\r\n              <div\r\n                onPointerDown={() => onMouseDown(index)}\r\n                onTouchStart={() => {\r\n                  setMouseDown(true);\r\n                  setMouseOver(index);\r\n                }}\r\n                onMouseOver={() => setMouseOver(index)}\r\n                onTouchMove={handleTouchMove}\r\n                data-index={index}\r\n                className={getCellClass(index)}\r\n                style={{ '--index': index } as React.CSSProperties}\r\n                key={char + index}\r\n              >\r\n                {char}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <WordList\r\n        words={Object.values(data.word_locations)}\r\n        remainingWords={remainingWords}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { DragMode } from './types';\r\n\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\n\r\nexport function useDeviceDetect() {\r\n  const [isMobile, setMobile] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    const userAgent =\r\n      typeof window.navigator === 'undefined' ? '' : navigator.userAgent;\r\n    const mobile = Boolean(\r\n      userAgent.match(\r\n        /Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile|WPDesktop/i\r\n      )\r\n    );\r\n    setMobile(mobile);\r\n  }, []);\r\n\r\n  return { isMobile };\r\n}\r\n\r\n// Safari friendly :(\r\nexport function useScreenOrientation() {\r\n  const getOrientation = () =>\r\n    window.innerWidth > window.innerHeight ? 'landscape' : 'portrait';\r\n\r\n  const [orientation, setOrientation] = useState(getOrientation());\r\n\r\n  const updateOrientation = useCallback(\r\n    () => setOrientation(() => getOrientation()),\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', updateOrientation);\r\n    return () => {\r\n      window.removeEventListener('resize', updateOrientation);\r\n    };\r\n  }, [updateOrientation]);\r\n\r\n  return orientation;\r\n}\r\n\r\nfunction getDragMode(x1: number, y1: number, x2: number, y2: number): DragMode {\r\n  if (x1 !== x2) {\r\n    if (y1 === y2) {\r\n      return 'horizontal';\r\n    } else {\r\n      return 'diagonal';\r\n    }\r\n  }\r\n  return 'vertical';\r\n}\r\n\r\nexport function getHighlightArray(\r\n  startIndex: number,\r\n  currentIndex: number,\r\n  lineLength: number,\r\n  indexes: number[]\r\n) {\r\n  const x1 = startIndex % lineLength;\r\n  const y1 = Math.trunc(startIndex / lineLength);\r\n  const x2 = currentIndex % lineLength;\r\n  const y2 = Math.trunc(currentIndex / lineLength);\r\n\r\n  const dragMode = getDragMode(x1, y1, x2, y2);\r\n\r\n  switch (dragMode) {\r\n    case 'horizontal': {\r\n      const minX = Math.min(startIndex, currentIndex);\r\n      const maxX = Math.max(startIndex, currentIndex);\r\n      return indexes.slice(minX, maxX + 1);\r\n    }\r\n    case 'vertical': {\r\n      const result = [];\r\n      const minY = Math.min(y1, y2);\r\n      const maxY = Math.max(y1, y2);\r\n\r\n      for (let i = minY; i <= maxY; i++) {\r\n        result.push(lineLength * i + x1);\r\n      }\r\n\r\n      return result.sort((a, b) => a - b);\r\n    }\r\n    case 'diagonal': {\r\n      const result = [];\r\n      const minY = Math.min(y1, y2);\r\n      const maxY = Math.max(y1, y2);\r\n      const minX = Math.min(x1, x2);\r\n      const maxX = Math.max(x1, x2);\r\n      const maxDiff = Math.max(maxX - minX, maxY - minY);\r\n\r\n      const vD = y2 > y1 ? 1 : -1;\r\n      const hD = x2 > x1 ? 1 : -1;\r\n\r\n      for (let i = 0; i <= maxDiff; i++) {\r\n        const nextY = lineLength * i * vD;\r\n        const nextX = i * hD;\r\n        const nextValue = startIndex + nextY + nextX;\r\n\r\n        // Overflow prevention\r\n        if (x1 + nextX >= lineLength || x1 + nextX < 0) break;\r\n        if (nextValue > indexes.length || nextValue < 0) break;\r\n\r\n        result.push(nextValue);\r\n      }\r\n\r\n      return result.sort((a, b) => a - b);\r\n    }\r\n  }\r\n}\r\n","import React, { FC } from 'react';\r\n\r\ntype StartScreenViewProps = { onClick: () => void };\r\n\r\nexport const StartScreenView: FC<StartScreenViewProps> = ({ onClick }) => (\r\n  <div onClick={onClick} className=\"app\">\r\n    <h2> Play Game! </h2>\r\n    <h3> Click anywhere to start the game</h3>\r\n  </div>\r\n);\r\n","import React, { FC } from 'react';\r\n\r\nexport const CongratulationsView: FC = () => (\r\n  <div className=\"app\">\r\n    <img\r\n      className=\"hat\"\r\n      width={200}\r\n      height={200}\r\n      src=\"/hat.svg\"\r\n      alt=\"Sombrero\"\r\n    />\r\n    <h2> Congratulations! </h2>\r\n    <h3> You just beat the game. </h3>\r\n  </div>\r\n);\r\n","import React, { FC } from 'react';\r\n\r\nexport const LandscapeUnsupportedView: FC = () => (\r\n  <div className=\"app\">\r\n    <h2> Sorry, landscape mode on mobile is not supported! </h2>\r\n    <h3> Please turn your screen back :) </h3>\r\n  </div>\r\n);\r\n","import React, { FC } from 'react';\r\n\r\nexport const ErrorView: FC = () => (\r\n  <div className=\"app\">\r\n    <h2> An error occurred while loading game data :( </h2>\r\n    <h3>You can try again by reloading page!</h3>\r\n  </div>\r\n);\r\n","import React, { FC } from 'react';\r\n\r\nexport const LoadingView: FC = () => (\r\n  <div className=\"app\">\r\n    <h2> Loading data... </h2>\r\n    <h3>Please wait!</h3>\r\n  </div>\r\n);\r\n","import React, { useEffect, useState } from 'react';\nimport axios, { AxiosResponse } from 'axios';\nimport './App.css';\nimport { GameComponent } from './components/GameComponent';\nimport { DataStructure } from './components/types';\nimport { useDeviceDetect, useScreenOrientation } from './components/utils';\nimport { StartScreenView } from './components/views/StartScreenView';\nimport { CongratulationsView } from './components/views/CongratulationsView';\nimport { LandscapeUnsupportedView } from './components/views/LandscapeUnsupportedView';\nimport { ErrorView } from './components/views/ErrorView';\nimport { LoadingView } from './components/views/LoadingView';\n\nconst fetchData = () =>\n  axios\n    .get<DataStructure[], AxiosResponse<string>>('/data/find_challenge.txt')\n    .then(res => res.data)\n    .then(res => res.split('\\n'))\n    .then(lines => lines.map(line => JSON.parse(line)));\n\nconst App: React.FC = () => {\n  const [isLoading, setLoading] = useState(true);\n  const [showLoader, setShowLoader] = useState(false);\n  const [isError, setError] = useState(false);\n  const [isStarted, setStarted] = useState(false);\n  const [isFinished, setFinished] = useState(false);\n  const [data, setData] = useState<DataStructure[] | undefined>(undefined);\n  const [level, setLevel] = useState(0);\n  const orientation = useScreenOrientation();\n  const { isMobile } = useDeviceDetect();\n\n  useEffect(() => {\n    async function loadData() {\n      setLoading(true);\n      // Do not show loader if loading is fast\n      setTimeout(() => setShowLoader(true), 300);\n\n      try {\n        const data = await fetchData();\n        setData(data);\n      } catch (err) {\n        setData([]);\n        setError(true);\n        setShowLoader(false);\n      }\n      setLoading(false);\n    }\n\n    loadData();\n  }, []);\n\n  // Disable pinch zoom in Safari ඞ because Apple decided to ignore user-scalable=no\n  useEffect(() => {\n    document.addEventListener(\n      'gesturestart',\n      e => {\n        e.preventDefault();\n      },\n      { passive: false }\n    );\n  });\n\n  const onLevelComplete = () => {\n    setTimeout(() => {\n      if (level < data!.length - 1) {\n        setLevel(currentLevel => currentLevel + 1);\n      } else {\n        setFinished(true);\n      }\n    }, 1050);\n  };\n\n  if (isError) {\n    return <ErrorView />;\n  }\n\n  if (isLoading) {\n    if (showLoader) return <LoadingView />;\n    return <div className=\"app\" />;\n  }\n\n  if (isMobile && orientation === 'landscape') {\n    return <LandscapeUnsupportedView />;\n  }\n\n  if (!isStarted) {\n    return <StartScreenView onClick={() => setStarted(true)} />;\n  }\n\n  if (isFinished) {\n    return <CongratulationsView />;\n  }\n\n  const currentLevel = data![level];\n\n  return (\n    <div className=\"app\">\n      {data && (\n        <GameComponent\n          level={level}\n          data={currentLevel}\n          onLevelComplete={onLevelComplete}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}